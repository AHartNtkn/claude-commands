#!/bin/bash
# claude-analyze-validate: Validate task analysis results
# Run after /dev/plan/analyze to verify all tasks were processed correctly

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo "üîç Validating task analysis results..."
echo

# Check if plan.md exists
if [ ! -f .claude/plan.md ]; then
    echo -e "${RED}‚ùå No plan.md found${NC}"
    exit 1
fi

# Count task statuses
READY=$(grep -c '\*\*Status:\*\* ready' .claude/plan.md 2>/dev/null || echo 0)
BLOCKED=$(grep -c '\*\*Status:\*\* blocked' .claude/plan.md 2>/dev/null || echo 0)
ANALYZED=$(grep -c '\*\*Status:\*\* analyzed' .claude/plan.md 2>/dev/null || echo 0)
TOTAL=$((READY + BLOCKED + ANALYZED))

echo "üìä Task Status Summary:"
echo "  - Ready: $READY (need analysis)"
echo "  - Blocked: $BLOCKED (waiting on decisions)"
echo "  - Analyzed: $ANALYZED (complete)"
echo "  - Total: $TOTAL"
echo

# Check for ready tasks
if [ "$READY" -gt 0 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Still have $READY ready tasks to analyze${NC}"
    echo "Ready tasks:"
    grep -B1 '\*\*Status:\*\* ready' .claude/plan.md | grep '^\* \*\*\[' | head -5
    if [ "$READY" -gt 5 ]; then
        echo "  ... and $((READY - 5)) more"
    fi
else
    echo -e "${GREEN}‚úì All tasks analyzed or blocked${NC}"
fi

# Check questions
if [ -f .claude/questions.json ]; then
    OPEN_QUESTIONS=$(jq -r 'to_entries | map(select(.value.status == "open")) | length' .claude/questions.json)
    TOTAL_QUESTIONS=$(jq -r 'to_entries | length' .claude/questions.json)
    
    echo
    echo "‚ùì Questions Status:"
    echo "  - Open: $OPEN_QUESTIONS"
    echo "  - Total: $TOTAL_QUESTIONS"
    
    if [ "$OPEN_QUESTIONS" -gt 0 ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Open questions need answers:${NC}"
        jq -r 'to_entries | map(select(.value.status == "open")) | .[].key + ": " + .value.question' .claude/questions.json | head -3
        if [ "$OPEN_QUESTIONS" -gt 3 ]; then
            echo "  ... and $((OPEN_QUESTIONS - 3)) more"
        fi
    fi
else
    echo
    echo "üìù No questions.json found (no technical decisions needed yet)"
fi

# Check for decomposed tasks
echo
echo "üîÄ Checking decompositions..."
DECOMPOSED=$(grep -c 'Decomposes into:' .claude/plan.md 2>/dev/null || echo 0)
if [ "$DECOMPOSED" -gt 0 ]; then
    echo -e "${GREEN}‚úì Found $DECOMPOSED decomposed tasks${NC}"
    
    # Verify subtasks exist
    MISSING_SUBTASKS=0
    for line in $(grep -n 'Decomposes into:' .claude/plan.md | cut -d: -f1); do
        SUBTASK_LINE=$(sed -n "${line}p" .claude/plan.md)
        # Extract subtask IDs (assuming format like [T-029, T-030])
        SUBTASKS=$(echo "$SUBTASK_LINE" | grep -oE 'T-[0-9]{3}' || true)
        for subtask in $SUBTASKS; do
            if ! grep -q "^\* \*\*\[ \] $subtask" .claude/plan.md; then
                echo -e "${RED}‚ùå Missing subtask: $subtask${NC}"
                MISSING_SUBTASKS=$((MISSING_SUBTASKS + 1))
            fi
        done
    done
    
    if [ "$MISSING_SUBTASKS" -eq 0 ]; then
        echo -e "${GREEN}‚úì All subtasks present${NC}"
    fi
else
    echo "No decomposed tasks found"
fi

# Check session files
echo
echo "üìÅ Checking session files..."
if [ -d .claude/sessions ]; then
    ANALYZE_SESSIONS=$(ls .claude/sessions/analyze-T-*.json 2>/dev/null | wc -l || echo 0)
    echo "Found $ANALYZE_SESSIONS analysis session files"
    
    # Check for incomplete sessions (orphaned)
    ORPHANED_SESSIONS=0
    for session in .claude/sessions/analyze-T-*.json; do
        if [ -f "$session" ]; then
            STATUS=$(jq -r '.status // "unknown"' "$session")
            if [ "$STATUS" = "in_progress" ]; then
                # Check if file is more than 10 minutes old (likely orphaned)
                if [ "$(find "$session" -mmin +10 2>/dev/null)" ]; then
                    echo -e "${YELLOW}‚ö†Ô∏è  Orphaned session: $(basename $session) (status: in_progress, >10 min old)${NC}"
                    ORPHANED_SESSIONS=$((ORPHANED_SESSIONS + 1))
                fi
            fi
            
            # Check for systematic underestimation
            TOTAL_LOC=$(jq -r '.complexity_analysis.total_loc // 0' "$session" 2>/dev/null)
            if [ "$TOTAL_LOC" -gt 0 ] && [ "$TOTAL_LOC" -lt 500 ]; then
                PATH_CHOSEN=$(jq -r '.path_chosen // ""' "$session" 2>/dev/null)
                if [ "$PATH_CHOSEN" = "PATH_C_SIMPLE" ]; then
                    # Track for pattern analysis (not shown individually)
                    SIMPLE_COUNT=$((${SIMPLE_COUNT:-0} + 1))
                fi
            fi
        fi
    done
    
    if [ "$ORPHANED_SESSIONS" -gt 0 ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Found $ORPHANED_SESSIONS orphaned session files${NC}"
    fi
    
    # Report pattern if many tasks estimated <500 LOC
    if [ "${SIMPLE_COUNT:-0}" -gt 5 ]; then
        PERCENT=$((SIMPLE_COUNT * 100 / ANALYZE_SESSIONS))
        echo -e "${YELLOW}‚ö†Ô∏è  $SIMPLE_COUNT tasks ($PERCENT%) estimated <500 LOC - possible systematic underestimation${NC}"
    fi
else
    echo "No sessions directory found"
fi

# Check for potential issues
echo
echo "üîé Checking for potential issues..."

# Check for tasks with very long acceptance criteria (might need decomposition)
LONG_TASKS=$(grep -A5 'Acceptance Criteria:' .claude/plan.md | grep -c '.*;.*;.*;.*;.*' || echo 0)
if [ "$LONG_TASKS" -gt 0 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Found $LONG_TASKS tasks with 5+ acceptance criteria (might need decomposition)${NC}"
fi

# Check for orphaned questions (questions without affected tasks)
if [ -f .claude/questions.json ]; then
    ORPHANED=$(jq -r 'to_entries | map(select(.value.affects | length == 0)) | length' .claude/questions.json 2>/dev/null || echo 0)
    if [ "$ORPHANED" -gt 0 ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Found $ORPHANED questions without affected tasks${NC}"
    fi
fi

# Summary
echo
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
echo "üìä VALIDATION SUMMARY"
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"

ISSUES=0

if [ "$READY" -gt 0 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  $READY tasks still need analysis${NC}"
    ISSUES=$((ISSUES + 1))
fi

if [ "$OPEN_QUESTIONS" -gt 0 ] 2>/dev/null; then
    echo -e "${YELLOW}‚ö†Ô∏è  $OPEN_QUESTIONS questions need answers${NC}"
    ISSUES=$((ISSUES + 1))
fi

if [ "$MISSING_SUBTASKS" -gt 0 ] 2>/dev/null; then
    echo -e "${RED}‚ùå $MISSING_SUBTASKS subtasks missing${NC}"
    ISSUES=$((ISSUES + 1))
fi

if [ "$ISSUES" -eq 0 ]; then
    echo -e "${GREEN}‚úÖ All validations passed!${NC}"
    echo
    echo "Next steps:"
    if [ "$OPEN_QUESTIONS" -gt 0 ] 2>/dev/null; then
        echo "  ‚Üí Run /dev/plan/question to answer open questions"
    elif [ "$READY" -eq 0 ] && [ "$BLOCKED" -eq 0 ]; then
        echo "  ‚Üí Run /dev/plan/complete to finalize the plan"
    elif [ "$READY" -eq 0 ] && [ "$BLOCKED" -gt 0 ]; then
        echo "  ‚Üí Tasks are blocked on questions"
    fi
else
    echo -e "${RED}Issues found - review above for details${NC}"
    
    # Provide next action
    echo
    echo "Recommended action:"
    if [ "$READY" -gt 0 ]; then
        echo "  ‚Üí Run /dev/plan/analyze to process remaining ready tasks"
    elif [ "$OPEN_QUESTIONS" -gt 0 ] 2>/dev/null; then
        echo "  ‚Üí Run /dev/plan/question to answer open questions"
    fi
fi